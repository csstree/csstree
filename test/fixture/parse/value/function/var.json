{
    "basic": {
        "source": "var(--name)",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                }
            ]
        }
    },
    "with fallback": {
        "source": "var(--name,value)",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Raw",
                    "value": "value"
                }
            ]
        }
    },
    "falback is {}-block": {
        "source": "var(--name,{foo:bar;baz:{}})",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Raw",
                    "value": "{foo:bar;baz:{}}"
                }
            ]
        }
    },
    "complex balanced": {
        "source": "var(--name,{[({()})()()[({})]]}[{()}]([]))",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Raw",
                    "value": "{[({()})()()[({})]]}[{()}]([])"
                }
            ]
        }
    },
    "should ignore everything inside falback's block": {
        "source": "var(--name,{!important})",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Raw",
                    "value": "{!important}"
                }
            ]
        }
    },
    "empty fallback": {
        "source": "var(--name,)",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Raw",
                    "value": ""
                }
            ]
        }
    },
    "should preserve single spaces": {
        "source": "var(--name, )",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Raw",
                    "value": " "
                }
            ]
        }
    },
    "spaces and comments": {
        "source": "var( /* 1 */ --name /* 2 */ , /* 3 */ )",
        "translate": "var(--name, /* 3 */ )",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Raw",
                    "value": " /* 3 */ "
                }
            ]
        }
    },
    "should parse a fallback value when parseCustomProperty is true": {
        "options": {
            "parseCustomProperty": true
        },
        "source": "var(--foo, 1 foo)",
        "translate": "var(--foo,1 foo)",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--foo"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Value",
                    "children": [
                        {
                            "type": "Number",
                            "value": "1"
                        },
                        {
                            "type": "WhiteSpace",
                            "value": " "
                        },
                        {
                            "type": "Identifier",
                            "name": "foo"
                        }
                    ]
                }
            ]
        }
    },
    "should be a error here (since unmatched tokens are disallowed), but ok for now": {
        "source": "var(--name, ()])",
        "offset": "              ^",
        "_error": "RightParenthesis is expected",
        "ast": {
            "type": "Function",
            "name": "var",
            "children": [
                {
                    "type": "Identifier",
                    "name": "--name"
                },
                {
                    "type": "Operator",
                    "value": ","
                },
                {
                    "type": "Raw",
                    "value": " ()]"
                }
            ]
        }
    },
    "error": [
        {
            "source": "var(name)",
            "offset": "    ^",
            "error": "HyphenMinus is expected"
        },
        {
            "source": "var(-name)",
            "offset": "     ^",
            "error": "HyphenMinus is expected"
        },
        {
            "source": "var(-!)",
            "offset": "     ^",
            "error": "HyphenMinus is expected"
        },
        {
            "source": "var(--name,([)])",
            "offset": "                ^",
            "error": "RightParenthesis is expected"
        },
        {
            "source": "var(--name, !important ())",
            "offset": "            ^",
            "error": "RightParenthesis is expected"
        },
        {
            "source": "var(--name, foo; bar)",
            "offset": "               ^",
            "error": "RightParenthesis is expected"
        }
    ]
}
