{
    "filter.0": {
        "source": "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')"
            }
        }
    },
    "filter.1": {
        "source": "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')progid:DXImageTransform.Microsoft.AlphaImageLoader(src='test.png',sizingMethod='something')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')progid:DXImageTransform.Microsoft.AlphaImageLoader(src='test.png',sizingMethod='something')"
            }
        }
    },
    "filter.2": {
        "source": "*filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "*filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')"
            }
        }
    },
    "filter.3": {
        "source": "-filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "-filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')"
            }
        }
    },
    "filter.4": {
        "source": "_filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "_filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')"
            }
        }
    },
    "filter.5": {
        "source": "-ms-filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "-ms-filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')"
            }
        }
    },
    "filter.c.0": {
        "source": "filter/*test*/:/*test*/progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "translate": "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')"
            }
        }
    },
    "filter.c.1": {
        "source": "filter/*test*/:/*test*/progid:DXImageTransform.Microsoft.AlphaImageLoader(/*)*/src='images/transparent-border.png'/*)*/,/*)*/sizingMethod='scale')",
        "translate": "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(/*)*/src='images/transparent-border.png'/*)*/,/*)*/sizingMethod='scale')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(/*)*/src='images/transparent-border.png'/*)*/,/*)*/sizingMethod='scale')"
            }
        }
    },
    "filter.s.0": {
        "source": "filter  :  progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "translate": "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')"
            }
        }
    },
    "filter.s.1": {
        "source": "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')\n       progid:DXImageTransform.Microsoft.AlphaImageLoader(src='test.png',sizingMethod='something')",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='images/transparent-border.png',sizingMethod='scale')\n       progid:DXImageTransform.Microsoft.AlphaImageLoader(src='test.png',sizingMethod='something')"
            }
        }
    },
    "filter.s.2": {
        "source": "filter: progid: DXImageTransform.Microsoft.gradient(startColorstr='$start', endColorstr='$stop', GradientType=0)",
        "translate": "filter:progid: DXImageTransform.Microsoft.gradient(startColorstr='$start', endColorstr='$stop', GradientType=0)",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "progid: DXImageTransform.Microsoft.gradient(startColorstr='$start', endColorstr='$stop', GradientType=0)"
            }
        }
    },
    "alpha()": {
        "source": "filter: alpha(opacity=60)",
        "translate": "filter:alpha(opacity=60)",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "alpha(opacity=60)"
            }
        }
    },
    "alpha() case insensetive": {
        "source": "filter: ALPHA(opacity=60)",
        "translate": "filter:ALPHA(opacity=60)",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "ALPHA(opacity=60)"
            }
        }
    },
    "dropshadow()": {
        "source": "filter: dropshadow(color=#000,offx=0,offy=-1)",
        "translate": "filter:dropshadow(color=#000,offx=0,offy=-1)",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "dropshadow(color=#000,offx=0,offy=-1)"
            }
        }
    },
    "chroma()": {
        "source": "filter: chroma(color=red)",
        "translate": "filter:chroma(color=red)",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "chroma(color=red)"
            }
        }
    },
    "unclosed functions should not be invalid per spec, not sure it's true for IE (need to be check and fail may be)": {
        "source": "filter:alpha(opacity",
        "ast": {
            "type": "Declaration",
            "important": false,
            "property": "filter",
            "value": {
                "type": "Raw",
                "value": "alpha(opacity"
            }
        }
    }
}
